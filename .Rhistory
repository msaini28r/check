library(datasets)  # Load built-in datasets
head(iris)         # Show the first six lines of iris data
summary(iris)      # Summary statistics for iris data
plot(iris)         # Scatterplot matrix for iris data
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
library(datasets)  # Load built-in datasets
# I recommend "pacman" for managing add-on packages. It will
# install packages, if needed, and then load the packages.
install.packages("pacman")
install.packages("pacman")
# Then load the package by using either of the following:
require(pacman)  # Gives a confirmation message.
# Or, by using "pacman::p_load" you can use the p_load
# function from pacman without actually loading pacman.
# These are packages I load every time.
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes,
ggvis, httr, lubridate, plotly, rio, rmarkdown, shiny,
stringr, tidyr)
install.packages("shiny")
install.packages("ggvis")
# Or, by using "pacman::p_load" you can use the p_load
# function from pacman without actually loading pacman.
# These are packages I load every time.
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes,
ggvis, httr, lubridate, plotly, rio, rmarkdown, shiny,
stringr, tidyr)
library(datasets)  # Load/unload base packages manually
require(shiny)
install.packages(c("Rcpp", "httpuv", "shiny"))
install.packages(c("Rcpp", "httpuv", "shiny"))
require(shiny)
library(shiny)
library(GGally)
install.packages("httpuv")
library(httr)
library(shiny)
remove.packages(c("httpuv", "data.table"))
remove.packages("httpuv")
remove.packages(c("httpuv"))
install.packages("httpuv",dependencies = TRUE)
library(shiny)
install.packages("shiny",dependencies = TRUE)
install.packages("httpuv")
library(shiny)
detach("package:shiny", unload = TRUE)
library(shiny)
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
library(remotes)
install_github("JustinMShea/ExpectedReturns")
install.packages("factorAnalytics", repos="http://R-Forge.R-project.org")
install.packages("FactorAnalytics", repos="http://R-Forge.R-project.org")
library(remotes)
install_github("JustinMShea/ExpectedReturns")
install_github("braverock/FactorAnalytics")
install_github("braverock/FactorAnalytics")
install_github("braverock/FactorAnalytics")
library(remotes)
install_github("JustinMShea/ExpectedReturns")
install_github("JustinMShea/ExpectedReturns")
remove.packages("FactorAnalytics")
remove.packages("ExpectedReturns")
install_github("JustinMShea/ExpectedReturns")
library(remotes)
library(remotes)
install_github("JustinMShea/ExpectedReturns")
install.packages("remotes")
install.packages("remotes")
library(remotes)
remotes::install_github("JustinMShea/ExpectedReturns")
install_github("JustinMShea/ExpectedReturns")
install_github("JustinMShea/ExpectedReturns")
library(remotes)
install_github("JustinMShea/ExpectedReturns")
install_github("JustinMShea/ExpectedReturns")
devtools::install("my_local_package", dependencies = FALSE)
devtools::install("JustinMShea/ExpectedReturns", dependencies = FALSE)
devtools::install("ExpectedReturns", dependencies = FALSE)
devtools::install()
install_github("JustinMShea/ExpectedReturns")
Git config (global)
install.packages("usthis")
install.packages("usethis")
install.packages("usethis")
usethis::use_git_config(user.name = "msaini0r", user.email = "msaini0r@gmail.com")
usethis::create_github_token()
credentials::set_github_pat("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")
credentials::set_github_pat("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")
credentials::set_github_pat("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")
usethis::git_sitrep()
library(remotes)
install_github("JustinMShea/ExpectedReturns")
install_github("braverock/FactorAnalytics")
remotes::install_github("JustinMShea/ExpectedReturns")
file.path(R.home(), "bin/x64")
list.files()
pkg_install
file.path(R.home(), "bin/x64")
list.files()
writeLines(strsplit(Sys.getenv("PATH"), ";")[[1]])
library(remotes)
install_github("JustinMShea/ExpectedReturns")
remotes::install_github("JustinMShea/ExpectedReturns")
options(download.file.method = "wininet")
remotes::install_github("JustinMShea/ExpectedReturns")
writeLines(strsplit(Sys.getenv("PATH"), ";")[[1]])
C:\Program Files\R\R-4.0.2\bin\x64
writeLines(strsplit(Sys.getenv("PATH"), ";")[[1]])
C:\Program Files\R\R-4.2.2\bin\x64
writeLines(strsplit(Sys.getenv("PATH"), ";")[[1]])
C:\Program Files\R\R-4.2.2\bin\x64
remotes::install_github("JustinMShea/ExpectedReturns")
library(remotes)
library(remotes)
remove.packages("remotes")
install.packages("remotes")
library(remotes)
library(remotes)
library(remotes)
library(remotes)
library(remotes)
library(remotes)
install_github("JustinMShea/ExpectedReturns")
remotes::install_github("JustinMShea/ExpectedReturns")
options(download.file.method = "wininet")
remotes::install_github("JustinMShea/ExpectedReturns")
library(remotes)
install_github("JustinMShea/ExpectedReturns")
library(remotes)
install_github("JustinMShea/ExpectedReturns")
writeLines(strsplit(Sys.getenv("PATH"), ";")[[1]])
C:\Program Files\R\R-4.0.2\bin\x64
C:\rtools40\usr\bin
C:\rtools40\
file.path(R.home(), "bin/x64")
list.files()
Sys.setenv(R_REMOTES_STANDALONE="true")
library(remotes)
install_github("JustinMShea/ExpectedReturns")
build = FALSE
library(remotes)
install_github("JustinMShea/ExpectedReturns")
build = TRUE
library(remotes)
install_github("JustinMShea/ExpectedReturns")
remotes::install_github("JustinMShea/ExpectedReturns")
remove.packages(c("curl","httr"))
install.packages(c("curl", "httr"))
Sys.setenv(CURL_CA_BUNDLE="/usr/lib64/microsoft-r/3.4/lib64/R/lib/microsoft-r-cacert.pem")
devtools::install_git("https://github.com/yihui/xaringan")
Sys.setenv(CURL_CA_BUNDLE="/usr/lib64/microsoft-r/3.4/lib64/R/lib/microsoft-r-cacert.pem")
install.packages("remotes")
remotes::install_github("JustinMShea/ExpectedReturns")
library(remotes)
install.packages("remotes")
remotes::install_github("JustinMShea/ExpectedReturns")
install.packages("remotes")
remotes::install_github("JustinMShea/ExpectedReturns")
install_github("JustinMShea/ExpectedReturns")
install.packages("devtools")
library("devtools")
library(remotes)
install_github("JustinMShea/ExpectedReturns")
remotes::install_github("JustinMShea/ExpectedReturns")
Sys.getenv("GITHUB_PAT")
Sys.unsetenv("GITHUB_PAT")
remotes::install_github("JustinMShea/ExpectedReturns")
install_github("JustinMShea/ExpectedReturns")
remotes::install_github("JustinMShea/ExpectedReturns")
install_github("JustinMShea/ExpectedReturns")
install.packages("Rcpp")
library(("Rcpp"))
library((\"Rcpp")
library("Rcpp")
evalCpp("1+2")
library(remotes)
install_github("JustinMShea/ExpectedReturns")
install.packages("factorAnalytics", repos="http://R-Forge.R-project.org")
install.packages("FactorAnalytics", repos="http://R-Forge.R-project.org")
library(remotes)
install_github("JustinMShea/ExpectedReturns")
library(remotes)
install_github("JustinMShea/ExpectedReturns")
install_github("braverock/FactorAnalytics")
library(remotes)
install_github("JustinMShea/ExpectedReturns")
install_github("braverock/FactorAnalytics")
options(download.file.method = "wininet")
devtools::install_github("JustinMShea/ExpectedReturns")
remove.packages("FactorAnalytics")
devtools::install_github("braverock/FactorAnalytics")
install.packages("rag")
install.packages("ragg")
install.packages("pkgdown")
setwd("C:/Users/kse/Downloads/test")
library(devtools)
library("devtools")
detach("package:devtools", unload = TRUE)
library("devtools")
